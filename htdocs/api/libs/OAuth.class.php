<?php

require_once "Database.class.php";
require_once "User.class.php";
class OAuth  //OAuth can be used to generate new refresh tokens
{
    private $db;
    public $username = null;
    public $access_token = null;
    private $refresh_token = null;
    private $validfor = 3600;
    private $isUser;
    private $reference_token = null;
    private $users_table_session;
    public function __construct($token = null) //can construct with refresh token or without
    {
        $this->db = Database::getConnection();
        $this->users_table_session = Database::getCurrentDB()[1];
        if ($token != null) {
            if ($this->stringStart($token, "r.")) {
                //echo "refresh token";
                $this->refresh_token = $token;
            } elseif ($this->stringStart($token, "a.")) {
                //echo "access token";
                $this->access_token = $token;
            } else {
                $this->setUsername($token);
            }
        }
    }


    public function authenticate()
    {
        if ($this->access_token) {
            $query = "SELECT * FROM `$this->users_table_session` WHERE `access_token` = '$this->access_token'";
            $result = $this->db->query($query);
            if ($result) {
                $result_row = $result->fetch_assoc();
                $expiry = strtotime($result_row['created_at']) + 3600;
                //echo time() . " " . $expiry;
                if (time() <= $expiry) {
                    if (!isset($_SESSION)) {
                        session_start();
                    }
                    $this->username = $result_row['username'];
                    $_SESSION['username'] = $this->username;
                    $_SESSION['access_token'] = $this->access_token;
                    return true;
                } else {
                    throw new Exception("Access token expired, Login Again");
                }
            } else {
                throw new Exception("Error : " . mysqli_error($this->db));
            }
        } else {
            throw new Exception("Invalid Access token");
        }
    }


    public function setUsername($username)
    {
        $this->isUser = new User($username);
        $this->username = $this->isUser->getName();
        //above User Construction is not safe instead we can get user obj from Auth.class.php which filtered the user from the addSession() method
    }

    public function getUsername()
    {
        return $this->username;
    }

    public function newSession($validfor = 3600, $reference_token = "Auth_Grant")
    {
        if ($reference_token == "Auth_Grant") {
            $this->refresh_token = 'r.' . Auth::gen_token(32);
        } else {
            $this->refresh_token = "NR." . Auth::gen_token(32);
        }
        $this->access_token = 'a.' . Auth::gen_token(32);
        $this->validfor = $validfor;
        $this->reference_token = $reference_token;
        ///$this->validfor = time() + 3600;    //generated by copilot
        $query = "INSERT INTO `$this->users_table_session` (`username`, `access_token`, `refresh_token`, `reference_token`, `valid_for`)
                  VALUES ('$this->username', '$this->access_token', '$this->refresh_token', '$this->reference_token', '$this->validfor')";
        $result = $this->db->query($query);
        if ($result) {
            return array(
                "Important Message!" => "Please Don't Share this Token with anyone",
                "Type" => "Bearer(API)",
                "Username" => $this->getUsername(),
                "Reference Key" => $this->reference_token,
                "Valid for" => $this->validfor,
                "Access_token" => $this->access_token,
                "Refresh_token" => $this->refresh_token
            );
        } else {
            throw new Exception("Error : " . mysqli_error($this->db));
        }
    }

    private function stringStart($string, $startString)
    {
        $len = strlen($startString);
        return (substr($string, 0, $len) === $startString);
    }

    public function refreshSession()
    {
        if ($this->refresh_token and (!$this->stringStart($this->refresh_token, "NR."))) {
            $query = "SELECT * FROM `$this->users_table_session` WHERE `refresh_token` = '$this->refresh_token'";
            $result = $this->db->query($query);
            if ($result) {
                $data = $result->fetch_assoc();
                $this->username = $data['username'];
                if ($data['valid']) {
                    return $this->newSession($this->validfor, $this->refresh_token);
                } else {
                    throw new Exception("Refresh token expired.");
                }
            } else {
                throw new Exception("Error : " . mysqli_error($this->db));
            }
        } else {
            throw new Exception("Invalid Refresh token(NotReal..)");
        }
    }
}
